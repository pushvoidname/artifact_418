{
  "Object": "app",
  "API_Name": "execDialog",
  "API_Type": "Method",
  "API_Description": "Presents a modal dialog box to the user. Modal dialog boxes must be closed by the user before the host application can be directly used again.",
  "Version": "7.0",
  "Save-Prefs": "No",
  "Security": "No",
  "Product": "All",
  "Parameters": {
    "monitor": {
      "description": "An object literal. It consists of several handlers (see Dialog box handlers) and a description property that describes the dialog box elements (see description property)."
    },
    "inheritDialog": {
      "description": "(optional) A Dialog object that should be reused when displaying this dialog box. It is useful when displaying a series of dialog boxes (such as a wizard) to prevent one from disappearing before the new one is displayed. The default is not to reuse a dialog box."
    },
    "parentDoc": {
      "description": "(optional) A Doc object to use as the parent for this dialog box. The default parent is the Acrobat application."
    }
  },
  "Returns": "A string, which is the of the element that caused the dialog box to be dismissed. The return value is \u201cok\u201d or \u201ccancel\u201d if the dismissing element is the `ok` or `cancel` button.\n\n!! Note Debugging is disabled while a modal dialog box created by `app.execDialog` is active.",
  "Examples": [
    "The following dialog box descriptor can be a document-level or folder-level JavaScript. The dialog box created contains text fields for your first and last name. When the OK button is clicked, the names entered are reported to the console.\n\n```\nvar dialog1 = {\n\n    initialize: function (dialog) {\n        // Create a static text containing the current date.\n        var todayDate = dialog.store()[\"date\"];\n        todayDate = \"Date: \" + util.printd(\"mmmm dd, yyyy\", new Date());\n        dialog.load({ \"date\": todayDate });\n    },\n    commit:function (dialog) { // called when OK pressed\n        var results = dialog.store();\n        // Now do something with the data collected, for example,\n        console.println(\"Your name is \" + results[\"fnam\"]\n            + \" \" + results[\"lnam\"] );\n    },\n    description:\n    {\n        name: \"Personal Data\",    // Dialog box title\n        align_children: \"align_left\",\n        width: 350,\n        height: 200,\n        elements:\n        [\n            {\n                type: \"cluster\",\n                name: \"Your Name\",\n                align_children: \"align_left\",\n                elements:\n                [\n                    {\n                        type: \"view\",\n                        align_children: \"align_row\",\n                        elements:\n                        [\n                            {\n                                type: \"static_text\",\n                                name: \"First Name: \"\n                            },\n                            {\n                                item_id: \"fnam\",\n                                type: \"edit_text\",\n                                alignment: \"align_fill\",\n                                width: 300,\n                                height: 20\n                            }\n                        ]\n                    },\n                    {\n                        type: \"view\",\n                        align_children: \"align_row\",\n                        elements:\n                        [\n                            {\n                                type: \"static_text\",\n                                name: \"Last Name: \"\n                            },\n                            {\n                                item_id: \"lnam\",\n                                type: \"edit_text\",\n                                alignment: \"align_fill\",\n                                width: 300,\n                                height: 20\n                            }\n                        ]\n                    },\n                    {\n                        type: \"static_text\",\n                        name: \"Date: \",\n                        char_width: 25,\n                        item_id: \"date\"\n                    },\n                ]\n            },\n            {\n                alignment: \"align_right\",\n                type: \"ok_cancel\",\n                ok_name: \"Ok\",\n                cancel_name: \"Cancel\"\n            }\n        ]\n    }\n};\n```\n\nNow, the following line can be executed from actions such as the mouse-up action of a button or a menu action.\n\n```\napp.execDialog(dialog1);\n```",
    "The following example uses a check box and a radio button field. This code might be a document-level JavaScript.\n\n```\nvar dialog2 =\n{\n    initialize: function(dialog) {\n        // Set a default value for radio button field\n        dialog.load({\"rd01\": true });\n        this.hasPet = false;\n        // Disable radio button field\n        dialog.enable({\n            \"rd01\" : this.hasPet,\n            \"rd02\" : this.hasPet,\n            \"rd03\" : this.hasPet\n        });\n    },\n    commit: function(dialog) {\n        // When the user presses \"Ok\", this handler will execute first\n        console.println(\"commit\");\n        var results = dialog.store();\n        // Do something with the data, for example,\n        var hasPet = (this.hasPet) ? \"have\" : \"don't have\";\n        console.println(\"You \" + hasPet + \" a pet.\");\n        if (this.hasPet)\n            console.println(\"You have \" + this.getNumPets(results)\n                + \" pet(s).\");\n    },\n    getNumPets: function (results) {\n        for ( var i=1; i<=3; i++) {\n            if ( results[\"rd0\"+i] ) {\n                switch (i) {\n                    case 1:\n                        var nPets = \"one\";\n                        break;\n                    case 2:\n                        var nPets = \"two\";\n                        break;\n                    case 3:\n                        var nPets = \"three or more\";\n                }\n            }\n        };\n        return nPets;\n    },\n    ok: function(dialog) {\n        // The handler for the Ok button will be handed after commit\n        console.println(\"Ok!\");\n    },\n    ckbx: function (dialog) {\n        // Process the checkbox, if the user has a pet, turn on radios\n        this.hasPet = !this.hasPet;\n        dialog.enable({\n            \"rd01\" : this.hasPet,\n            \"rd02\" : this.hasPet,\n            \"rd03\" : this.hasPet\n        });\n    },\n    cancel: function(dialog) { // Handle the cancel button\n        console.println(\"Cancel!\");\n    },\n    other: function(dialog){ // Handle the other button\n        app.alert(\"Thanks for pressing me!\");\n        dialog.end(\"other\"); // End the dialog box, return \"other\"!\n    },\n    // The dialog box description\n    description:\n    {\n        name: \"More Personal Information\",\n        elements:\n        [\n            {\n                type: \"view\",\n                align_children: \"align_left\",\n                elements:\n                [\n                    {\n                        type: \"static_text\",\n                        name: \"Personal Information\",\n                        bold: true,\n                        font: \"dialog\",\n                        char_width: 30,\n                        height: 20\n                    },\n                    {\n                        type: \"check_box\",\n                        item_id: \"ckbx\",\n                        name: \"Pet Owner\"\n                    },\n                    {\n                        type: \"view\",\n                        align_children: \"align_row\",\n                        elements:\n                        [\n                            {\n                                type: \"static_text\",\n                                name: \"Number of pets: \"\n                            },\n                            {\n                                type: \"radio\",\n                                item_id: \"rd01\",\n                                group_id: \"rado\",\n                                name: \"One\"\n\n                            },\n                            {\n                                type: \"radio\",\n                                item_id: \"rd02\",\n                                group_id: \"rado\",\n                                name: \"Two\",\n                            },\n                            {\n                                type: \"radio\",\n                                item_id: \"rd03\",\n                                group_id: \"rado\",\n                                name: \"Three or more\",\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                type: \"gap\",    //Add a small vertical gap between\n                height: 10      //..radio fields and buttons\n            },\n            {\n                type: \"ok_cancel_other\",\n                ok_name: \"Ok\",\n                cancel_name: \"Cancel\",\n                other_name: \"Press Me\"\n            }\n        ]\n    }\n};\n```\n\nThe following line can be executed in situations such as the mouse-up action of a button or a menu action.\n\n```\nvar retn = app.execDialog(dialog2);\n```\n\nThe value of `retn` is \u201cok\u201d if the Ok button was clicked, \u201ccancel\u201d if the Cancel button was clicked, and \u201cother\u201d if the button labeled \u201cPress Me\u201d was clicked.",
    "This example uses a list box.\n\n```\nvar dialog3 = {\n    // This dialog box is called when the dialog box is created\n    initialize: function(dialog) {\n        this.loadDefaults(dialog);\n    },\n    // This dialog box is called when the OK button is clicked.\n    commit: function(dialog) {\n            // See the Dialog object for a description of how dialog.load\n            // and dialog.store work.\n            var elements = dialog.store()[\"subl\"];\n            // do something with the data.\n    },\n    // Callback for when the button \"butn\" is clicked.\n    butn: function(dialog) {\n        var elements = dialog.store()[\"subl\"]\n        for(var i in elements) {\n            if ( elements[i] > 0 ) {\n                app.alert(\"You chose \"\" + i\n                    + \"\", which has a value of \" + elements[i] );\n            }\n        }\n    },\n    loadDefaults: function (dialog) {\n        dialog.load({\n            subl:\n            {\n                \"Acrobat Professional\": +1,\n                \"Acrobat Standard\": -2,\n                \"Adobe Reader\": -3\n            }\n        })\n    },\n    // The dialog box description\n    description:\n    {\n        name: \"Adobe Acrobat Products\", // Title of the dialog box\n        elements: // Child element array\n        [\n            {\n                type: \"view\",\n                align_children: \"align_left\",\n                elements: // Child element array\n                [\n                    {\n                        type: \"cluster\",\n                        name: \"Select\",\n                        elements: // Child Element Array\n                        [\n                            {\n                                type: \"static_text\",\n                                name: \"Select Acrobat you use\",\n                                font: \"default\"\n                            },\n                            {\n                                type: \"list_box\",\n                                item_id: \"subl\",\n                                width: 200,\n                                height: 60\n                            },\n                            {\n                                type: \"button\",\n                                item_id: \"butn\",\n                                name: \"Press Me\"\n                            }\n                        ]\n                    },\n                    {\n                        type: \"ok_cancel\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\nThen execute\n\n```\napp.execDialog(dialog3);\n```\n\nIn the example above, if the line `type: \"list_box\"` is replaced by `type: \"popup\"` and the `height` specification is removed, the example will run with a pop-up control rather than a list box.",
    "This example shows a hierarchical list box. After the dialog box is opened, a hierarchical list is presented. After a selection is made and the user clicks the Select button, the document jumps to the destination chosen by the user. The Doc object is passed to the dialog box by making it a property of the dialog box.\n\n```\nvar dialog4 = {\n    initialize: function(dialog) {\n        dialog.load({\n            subl:\n                {\n                    \"Chapter 1\":\n                    {\n                        \"Section 1\":\n                        {\n                            \"SubSection 1\": -1,\n                            \"SubSection 2\": -2,\n                        },\n                        \"Section 2\":\n                        {\n                            \"SubSection 1\": -3,\n                            \"SubSection 2\": -4,\n                        }\n                    },\n                    \"Chapter 3\": -5,\n                    \"Chapter 4\": -6\n                }\n        })\n    },\n    subl: function(dialog) {\n        console.println(\"Selection Box Hit\");\n    },\n    getHierChoice: function (e)\n    {\n        if (typeof e == \"object\") {\n            for ( var i in e ) {\n                if ( typeof e[i] == \"object\" ) {\n                    var retn = this.getHierChoice(e[i]);\n                    if ( retn ) {\n                        retn.label = i + \", \" + retn.label;\n                        return retn;\n                    }\n                // if e[i] > 0, we've found the selected item\n                } else  if ( e[i] > 0 ) return { label:i, value: e[i] };\n            }\n        } else {\n            if ( e[i] > 0 ) return e[i];\n        }\n    },\n    butn: function (dialog)\n    {\n        var element = dialog.store()[\"subl\"]\n        var retn = this.getHierChoice(element);\n        if ( retn ) {\n            // Write to the console the full name of the item selected\n            console.println(\"The selection you've chosen is \"\"\n                    + retn.label + \"\", its value is \" + retn.value );\n            dialog.end(\"ok\");\n            // this.doc is the doc object of this document\n            this.doc.gotoNamedDest(\"dest\"+retn.value);\n        }\n        else app.alert(\"Please make a selection, or cancel\");\n    },\n    cncl: function (dialog) { dialog.end(\"cancel\") },\n    // Dialog box description\n    description:\n    {\n        name: \"My Novel\",\n        elements:\n        [\n            {\n                type: \"view\",\n                align_children: \"align_left\",\n                elements:\n                [\n                    {\n                        type: \"cluster\",\n                        name: \"Book Headings\",\n                        elements:\n                        [\n                            {\n                                type: \"static_text\",\n                                name: \"Make a selection\",\n                            },\n                            {\n                                type: \"hier_list_box\",\n                                item_id: \"subl\",\n                                char_width: 20,\n                                height: 200\n                            }\n                        ]\n                    },\n                    {\n                        type: \"view\",\n                        align_children: \"align_row\",\n                        elements:\n                        [\n                            {\n                                type: \"button\",\n                                item_id: \"cncl\",\n                                name: \"Cancel\"\n                            },\n                            {\n                                item_id: \"butn\",\n                                type: \"button\",\n                                name: \"Select\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n};\n```\n\nThis function attaches the Doc object to the dialog box, then passes the dialog box to the `app.execDialog` method. The `dialog4` object and this function can be at the document level.\n\n```\nfunction dotheDialog(dialog,doc)\n{\n    dialog.doc = doc;\n    var retn = app.execDialog( dialog )\n}\n```\n\nFinally, the following script can be executed from a mouse-up action, for example.\n\n```\ndotheDialog( dialog4, this );\n```",
    "See trustPropagatorFunction which shows how to execute privileged code from a non-privileged context."
  ],
  "Dialog box handlers": "The dialog box handlers are called when specific dialog box events occur. Each handler is optional and is passed a `Dialog` object that can be used to query or set values in the dialog box. The supported handlers are listed in the table that follows.\n\nDialog box handler | Description\n--------------------------------\ninitialize | Called when the dialog box is being initialized.\nvalidate | Called when a field is modified to determine if the value is acceptable (by returning true) or unacceptable (by returning false).\ncommit | Called when the OK button of the dialog box is clicked.\ndestroy | Called when the dialog box is being destroyed.\nItemID | Called when the dialog box element ItemID is modified. For a text box, it is when the text box loses focus. For other controls, it is when the selection changes.  If ItemID is not a JavaScript identifier, the name must be enclosed in double quotes when the method is defined, as in the example below.\n\n```\n\"bt:1\": function () { .. }\n  //If *ItemID* is a JavaScript identifier, the double quotes are optional. For example, the following are both correct.  ``\"butn\": function () { .. }\n  butn: function () { .. }\n```",
  "description property": "The `description` property is an object literal that contains properties describing the dialog. Its `elements` property specifies the elements of the dialog box, and each of the elements in turn can have an `elements` property describing subelements.\n\nThe dialog properties at the root level of the `description` property are listed in the table that follows.\n\nProperty | Type | Description\n-----------------------------\nname | String | The title bar of the dialog box, which should be localized.\nfirst_tab | String | An ItemID for the dialog box item that should be first in the tab order. This dialog box item will also be active when the dialog box is created. This property is required for setting up a tabbing order. See the next_tab property defined below.\nwidth | Numeric | The width of the dialog box in pixels. If no width is specified, the combined width of the contents is used.\nheight | Numeric | The height of the dialog box in pixels. If no height is specified, the combined height of the contents is used.\nchar_width | Numeric | The width of the dialog box in characters. If no width is specified, the combined width of the contents is used.\nchar_height | Numeric | The height of the dialog box in characters. If no height is specified, the combined height of the contents is used.\nalign_children | String | The alignment for all descendants. Must be one of the following values:\n\n\u201calign_left\u201d: Left aligned\n\u201calign_center\u201d: Center aligned\n\u201calign_right\u201d: Right aligned\n\u201calign_top\u201d: Top aligned\n\u201calign_fill\u201d: Align to fill the parent\u2019s width; may widen objects.\n\u201calign_distribute\u201d: Distribute the contents over the parent\u2019s width.\n\u201calign_row\u201d: Distribute the contents over the parent\u2019s width with a consistent baseline.\n\u201calign_offscreen\u201d: Align items one on top of another.\nelements | Array | An array of object literals that describe the dialog box elements contained within this dialog (see elements property).",
  "elements property": "A dialog box `elements` property specifies an object literal with the following set of properties.\n\nProperty | Type | Description\n-----------------------------\nname | String | The displayed name of the dialog box element, which should be localized. This property is ignored for the \u201cedit_text\u201d type.\nitem_id | String | An ItemID for this dialog box, which is a unique 4-character string.\ntype | String | The type of this dialog box element. It must be one of the following strings:\n\n\nbutton\u201d - A push button.\ncheck_box\u201d - A check box.\nradio\u201d - A radio button.\nlist_box\u201d - A list box.\nhier_list_box\u201d - A hierarchical list box.\nstatic_text\u201d - A static text box.\nedit_text\u201d - An editable text box.\npopup\u201d - A pop-up control.\nok\u201d - An OK button.\nok_cancel\u201d - An OK and Cancel Button.\nok_cancel_other\u201d - An OK, Cancel, and Other button.\nview\u201d - A container for a set controls.\ncluster\u201d - A frame for a set of controls.\ngap\u201d - A place holder.\nnext_tab | String | An ItemID for the next dialog box item in the tab order. Tabbing does not stop at any dialog box item that is not the target of the next_tab (or first_tab) property. Tabbing should form a circular linked list.\nwidth | Numeric | Specifies the width of the element in pixels. If no width is specified, the combined width of the contents is used.\nheight | Numeric | Specifies the height of the element in pixels. If no height is specified, the combined height of the contents is used.\nchar_width | Numeric | Specifies the width of the element in characters. If no width is specified, the combined width of the contents is used.\nchar_height | Numeric | Specifies the height of the element in characters. If no height is specified, the combined height of the contents is used.\nfont | String | The font to use for this element. Must be one of the following strings:\n\n\ndefault\u201d - Default font\ndialog\u201d - Dialog box font\npalette\u201d - Palette (small) Font\nbold | Boolean | Specify if the font is bold.\nitalic | Boolean | Specify if the font is italic.\nalignment | String | Sets the alignment for this element. Must be one of the following values:\n\n\nalign_left\u201d: Left aligned\nalign_center\u201d: Center aligned\nalign_right\u201d: Right aligned\nalign_top\u201d: Top aligned\nalign_fill\u201d: Align to fill the parent\u2019s width; may widen objects.\nalign_distribute\u201d: Distribute the contents over the parent\u2019s width.\nalign_row\u201d: Distribute the contents over the parent\u2019s width with a consistent baseline.\nalign_offscreen\u201d: Align items one on top of another.\nalign_children | String | Sets the alignment for all descendants. Possible values are the same as for alignment.\nelements | Array | An array of object literals that describe the subelements of this dialog box element. Its properties are the same as those described in this table.\n\nElement type | Property | Type | Description\n--------------------------------------------\nstatic_text | multiline | Boolean | If true, this static text element is multiline.  For Mac OS, the height property must be at least 49 to display the up/down buttons, which allow users to read the whole box content.\nedit_text | multiline | Boolean | If true, this edit text element is multiline.\nedit_text | readonly | Boolean | If true, this text element is read only. This property is ignored when password is set to true.\nedit_text | password | Boolean | If true, this text element is a password field.\nedit_text | PopupEdit | Boolean | If true, it is a pop-up edit text element.\nedit_text | SpinEdit | Boolean | If true, it is a spin edit text element.\nradio | group_id | String | The group name to which this radio button belongs.\nok, ok_cancel,| ok_cancel_other | ok_name | String | The name for the OK button.\nok, ok_cancel,| ok_cancel_other | cancel_name | String | The name for the cancel button.\nok, ok_cancel,| ok_cancel_other | other_name | String | The name for the other button."
}