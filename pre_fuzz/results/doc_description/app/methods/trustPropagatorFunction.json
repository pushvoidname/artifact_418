{
  "Object": "app",
  "API_Name": "trustPropagatorFunction",
  "API_Type": "Method",
  "API_Description": "Marks a function as a . Such a function is not itself trusted but can inherit trust if called from a trusted function.",
  "Version": "7.0",
  "Save-Prefs": "No",
  "Security": "Yes",
  "Product": "All",
  "Parameters": {
    "oFunc": {
      "description": "A function object that specifies the function to mark as a trust propagator."
    }
  },
  "Returns": "On success, returns the same function object that was passed in. After successful execution, the function object will be a trust propagator. On error, throws `NotAllowedError` .",
  "Examples": [
    "For background, see example 3 following trustedFunction .\n\nThis example defines a trust propagator function, `mySaveAs` , to save a file to a folder, and a trusted function, `myTrustedSpecialTaskFunc` , to perform various tasks involving privileged and non-privileged code. The `mySaveAs` function cannot be called directly in a non-privileged context.\n\n```\nmySaveAs = app.trustPropagatorFunction(function(doc,path)\n{\n    app.beginPriv();\n        doc.saveAs(path);\n    app.endPriv();\n})\nmyTrustedSpecialTaskFunc = app.trustedFunction(function(doc,path)\n{\n    // Privileged and/or non-privileged code above\n    app.beginPriv();\n        mySaveAs(doc,path);\n    app.endPriv();\n    // Privileged and/or non-privileged code below\n});\n```\n\nExecuting the code from a mouse-up button, for example, saves the current document to the specified path.\n\n```\nmyTrustedSpecialTaskFunc(this, \"/c/temp/mySavedDoc.pdf\");\n```",
    "This example develops a simple dialog box using the `app.execDialog` method and executes privileged code.\n\nThe dialog box asks for your name and asks you to browse for a document from your local hard drive (or a network drive). When you click the OK button, the selected file is loaded into the viewer and your name is placed in the author field of the document properties. (The insertion of the name only occurs if the author field is empty.) The dialog box also displays the value of `identity.email` , which is privileged information.\n\nAny privileged code is enclosed by a `beginPriv/endPriv` pair.\n\nNote the use of the `ANTrustPropagateAll` function, which is useful for creating dialog boxes that use privileged code. It takes a single object as its argument, turns every function in the object into a trust propagator function, then returns that object.\n\n```\nmyDialog = app.trustedFunction(function()\n{\n    app.beginPriv();\n    var dialog = ANTrustPropagateAll({\n        initialize:function(dialog) {\n            this.data = {};   // An object to hold dialog data\n            app.beginPriv();\n            dialog.load({ \"emai\": \"Email: \" + identity.email });\n            app.endPriv();\n        },\n        commit:function (dialog) { // Called when OK pressed\n            var results = dialog.store();\n            console.println(\"Your name is \" + results[\"name\"] );\n            this.data.name = results[\"name\"];\n        },\n        brws: function (dialog) {\n            app.beginPriv();\n            var oRetn = app.browseForDoc();\n            if ( typeof oRetn != \"undefined\")\n                this.data.oRetn = oRetn;\n            app.endPriv();\n        },\n        doDialog:function() {\n            app.beginPriv();\n            var retn = app.execDialog(this);\n            app.endPriv();\n            return retn;\n        },\n        description: {\n            name: \"Open File & Populate Info Field\",\n            align_children: \"align_left\",\n            elements:\n            [\n                {\n                    type: \"view\",\n                    align_children: \"align_left\",\n                    elements:\n                    [\n                        {\n                            type: \"view\",\n                            align_children: \"align_row\",\n                            elements:\n                            [\n                                {\n                                    type: \"static_text\",\n                                    name: \"Name: \"\n                                },\n                                {\n                                    item_id: \"name\",\n                                    type: \"edit_text\",\n                                    alignment: \"align_fill\",\n                                    width: 300,\n                                    height: 20\n                                },\n                            ]\n                        },\n                        {\n                            type: \"static_text\",\n                            item_id: \"emai\",\n                            name: \"Email: \",\n                            char_width: 25\n                        },\n                        {\n                            type: \"gap\",\n                            height: 10\n                        },\n                        {\n                            type: \"view\",\n                            align_children: \"align_row\",\n                            elements:\n                            [\n                                {\n                                    type: \"button\",\n                                    name: \"Browse\",\n                                    item_id: \"brws\"\n                                },\n                                {\n                                    type: \"ok_cancel\",\n                                    ok_name: \"Ok\",\n                                    cancel_name: \"Cancel\"\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    });\n    app.endPriv();\n    try { // Protect against user pressing the Esc key\n        // After everything is set up, run the dialog box using the doDialog\n        // function, defined in the object dialog.\n        var retn = dialog.doDialog();\n        app.beginPriv();\n        // If the user clicked the Ok button and there is oRetn data we load\n        // the requested file using app.openDoc(), a restricted method.\n        if ( (retn == \"ok\") && dialog.data.oRetn ) {\n            var oDoc = app.openDoc({\n                cPath: dialog.data.oRetn.cPath,\n                cFS: dialog.data.oRetn.cFS\n            });\n            if ( !oDoc.info.Author  )\n                oDoc.info.Author = dialog.data.name;\n        }\n        app.endPriv();\n    } catch(e) {}\n})\n```\n\nThis dialog box can be activated from a button or, more appropriately, from a menu item or a toolbar button. For example, place the following code in a User JavaScript file to add a menu item to the Tools menu.\n\n```\napp.addMenuItem( { cName: \"myDialog\", cUser: \"My Cool Dialog\",\n    cParent: \"Tools\", cExec: \"myDialog()\", nPos: 0 } );\n```"
  ],
  "Syntax": "This method can be called in two ways.\n\n```\nmyPropagatorFunction = app.trustPropagatorFunction(\n    function()\n    {\n        <function body>\n    }\n);\n```\n\nor\n\n```\nfunction myOtherPropagatorFunction()\n{\n    <function body>\n};\napp.trustPropagatorFunction(myOtherPropagatorFunction);\n```"
}