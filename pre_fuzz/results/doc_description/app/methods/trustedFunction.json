{
  "Object": "app",
  "API_Name": "trustedFunction",
  "API_Type": "Method",
  "API_Description": "Marks a function as trusted. Trusted functions can explicitly increase the current for their stack frame. Typically, the stack frame (which corresponds to the body of the function) contains security-restricted methods that require a privileged context in which to run. By increasing the privilege level, these restricted methods can be executed in non-privileged contexts. See Privileged context .",
  "Version": "7.0",
  "Save-Prefs": "No",
  "Security": "No",
  "Product": "All",
  "Parameters": {
    "oFunc": {
      "description": "A function object that specifies the function to mark as trusted."
    }
  },
  "Returns": "On success, returns the same function object that was passed in. After successful execution, the function object will be trusted. On error, throws `NotAllowedError` .",
  "Examples": [
    "`app.newDoc` is a security-restricted method that needs a privileged context in which to run. For example, it cannot normally be executed from a mouse-up event. This example shows how this method can be executed from a mouse-up event by creating a trusted function.\n\nPlace the following script in a `.js` file in the User (or App) JavaScript folder.\n\n```\ntrustedNewDoc = app.trustedFunction( function (nWidth, nHeight)\n{\n    // Additional code may appear above\n    app.beginPriv();    // Explicitly raise privilege\n    app.newDoc( nWidth, nHeight );\n    app.endPriv();\n    // Additional code may appear below.\n})\n```\n\nAfter Acrobat is restarted, the `trustedNewDoc` function can be executed from anywhere. The following script for a mouse-up action of a button creates a new document that is 200 points by 200 points.\n\n```\ntrustedNewDoc( 200, 200 );\n```\n\nBecause of security restrictions, `app.newDoc(200,200)` cannot normally be executed from a mouse-up event. The trusted function permits the creation of a new document.\n\n!! Note This example is simplified. The trusted function could be modified so that it also has the two optional arguments of the `app.newDoc` method.\n\nThe `trustedNewDoc` function can also be executed as a menu item.\n\n```\napp.addMenuItem( {\n    cName: \"myTrustedNewDoc\",\n    cUser: \"New Doc\", cParent: \"Tools\",\n    cExec: \"trustedNewDoc(200,200)\", nPos: 0\n} );\n```\n\nAgain, `trustedNewDoc` could be enhanced by having the user input the dimensions for the new document, either through a series of `app.response` dialog boxes, or a full dialog box, created by `app.execDialog` .\n\n!! Note If `app.newDoc` is not enclosed in the `app.beginPriv/app.endPriv` pair, executing `trustedNewDoc` from a non-privileged context will fail and an exception will be thrown. You must explicitly raise the privilege level in the way shown.",
    "The `app.activeDocs` property behaves differently depending on the setting:\n\n*  During a console or batch event, it returns an array of all active documents.\n\n*  In a non-privileged context, it returns an array of only those active documents that have their `disclosed` property set to `true` .\n\nTo overcome this limitation in non-privileged context, you can define a trusted function that raises the privilege level and calls `activeDocs` . This function would be defined in a `.js` file in the User (or App) JavaScript folder.\n\n```\ntrustedActiveDocs = app.trustedFunction (\n    function()\n    {\n        app.beginPriv(); // Explicitly raise the privilege\n        var d = app.activeDocs;\n        app.endPriv();\n        return d;\n    }\n)\n```\n\nThe following code can be executed from a mouse-up action of a form button.\n\n```\nvar d = trustedActiveDocs();\nconsole.println(\"There are d = \" + d.length\n    + \" files open in the viewer.\")\nfor ( var i=0; i< d.length; i++)\n    console.println((i+1) + \". \" + d[i].documentFileName )\n```\n\nThe console reports the number and file name of all documents\u2014disclosed or not\u2014open in the viewer.",
    "A trusted function is capable of explicitly increasing the current privilege level only for its own stack frame. This example shows some related issues.\n\nThe following code attempts to make a trusted function more modular:\n\n```\nfunction mySaveAs(doc, path)\n{\n    doc.saveAs(doc, path);\n}\nmyFunc = app.trustedFunction( function (doc, path)\n{\n    // privileged and/or non-privileged code here\n    app.beginPriv();\n    mySaveAs(doc, path);\n    app.endPriv();\n    // privileged and/or non-privileged code here\n}\n```\n\nA problem occurs because when the privileged code `doc.saveAs(doc, path)` is executed, it is not within the stack frame (function body) of the calling trusted function `myFunc` but rather within the stack frame of `mySaveAs` , which is not a trusted function. Therefore, when `myFunc` is executed in a non-privileged context, it throws an exception.\n\nA possible solution is to make `mySaveAs` into a trusted function so that `myFunc` succeeds. However, this exposes the privileged `doc.saveAs` function to non-privileged execution by anyone that knows this function is on your system.\n\nYou cannot simply enclose `doc.saveAs(doc,path)` in a `beginPriv/endPriv` pair. When `myFunc` is run from a non-privileged context, an exception will be thrown by the `app.beginPriv` within the body of the `mySaveAs` function. This is because `mySaveAs` is not trusted and therefore is not authorized to request an increased privilege level.\n\nTo summarize the observations above, there is a need for a kind of function that has the following characteristics:\n\n*  It can be called by a trusted function.\n\n*  It is not trusted itself and therefore cannot be directly called from a non-privileged context.\n\nA function satisfies these criteria (see trustPropagatorFunction below)."
  ],
  "Syntax": "This method can be called in two ways.\n\n```\nmyTrustedFunction = app.trustedFunction(\n    function()\n    {\n        <function body>\n    }\n);\n```\n\nor\n\n```\nfunction myOtherTrustedFunction()\n{\n    <function body>\n};\napp.trustedFunction(myOtherTrustedFunction);\n```\n\nThe following examples, along with the examples following the `app.trustPropagatorFunction` method, contain many comments that clarify the notion of trusted function and highlight some of the nuances of the topic."
}