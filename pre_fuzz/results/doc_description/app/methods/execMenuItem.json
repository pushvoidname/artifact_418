{
  "Object": "app",
  "API_Name": "execMenuItem",
  "API_Type": "Method",
  "API_Description": "Executes the specified menu item.",
  "Version": "4.0",
  "Save-Prefs": "No",
  "Security": "Yes",
  "Product": "All",
  "Parameters": {
    "cMenuItem": {
      "description": "The menu item to execute.  A list of menu item names can be obtained with listMenuItems."
    },
    "oDoc": {
      "description": "(optional, Acrobat 7.0) oDoc is the Doc object of a document that is not hidden (see the Doc object hidden property). If this parameter is present, execMenuItem executes the menu item in the document\u2019s context."
    }
  },
  "Returns": "",
  "Examples": [
    ", below.\n\nAnother approach to executing `app.execMenuItem` without restriction is through Sign & Certify. When the document author signs and certifies the document, privileged methods can be executed from a non-privileged context provided the document consumer lists the author\u2019s certificate in the list of trusted identities and the consumer trusts the author for execution of embedded high privilege JavaScript.\n\nTo ensure a secure environment, the menu items that can be executed are limited to the following:\n\nAcroSendMail:SendMail | HandMenuItem | ShowHideToolbarBasicTools\n----------------------------------------------------------------\nActualSize | HelpReader | ShowHideToolbarCommenting\nAddFileAttachment | InsertPages | ShowHideToolbarData\nAnnots:Tool:InkMenuItem | LastPage | ShowHideToolbarEdit\nBookmarkShowLocation | NextPage | ShowHideToolbarEditing\nClose | OneColumn | ShowHideToolbarFile\nCropPages | OpenOrganizer | ShowHideToolbarFind\nDeletePages | PageSetup | ShowHideToolbarForms\nDocHelpUserGuide | PrevPage | ShowHideToolbarMeasuring\nExtractPages | Print | ShowHideToolbarNavigation\nFind | PropertyToolbar | ShowHideToolbarPageDisplay\nFindCurrentBookmark | Quit | ShowHideToolbarPrintProduction\nFindSearch | ReplacePages | ShowHideToolbarRedaction\nFirstPage | RotatePages | ShowHideToolbarTasks\nFitHeight | SaveAs | ShowHideToolbarTypewriter\nFitPage | Scan | SinglePage\nFitVisible | ShowHideAnnotManager | Spelling\nFitWidth | ShowHideArticles | Spelling:Check\nFullScreen | ShowHideBookmarks | TwoColumns\nGeneralInfo (Properties) | ShowHideFields | TwoPages\nGeneralPrefs | ShowHideFileAttachment | Web2PDF:OpenURL\nGoBack | ShowHideModelTree | ZoomDragMenuItem\nGoBackDoc | ShowHideOptCont | ZoomTo\nGoForward | ShowHideSignatures | ZoomViewIn\nGoForwardDoc | ShowHideThumbnails | ZoomViewOut\nGoToPage |  | \n\nThis list applies only to document-level access to menu items. It does not apply to application-level JavaScript or JavaScript from a privileged context.\n\nThe list is written to the Acrobat registry and can be edited if you determine that the list must be expanded. If you need to modify the list, you can edit the related registry entries:\n\n*  The key for the default list is HKEY_LOCAL_MACHINESOFTWAREPoliciesAdobeAdobe Acrobat9.0FeatureLockDowncDefaultExecMenuItems.\n\n*  The key for the list used by Tuner is HKEY_LOCAL_MACHINESOFTWAREPoliciesAdobeAdobe Acrobat9.0FeatureLockDowncAdminExecMenuItems.\n\nFor both keys, the value name is `tWhiteList` and the type is `REG_SZ` . The value data contains all menu item names and each menu item name is separated with the \u201c|\u201d delimiter.\n\nSee also addMenuItem , addSubMenu , and hideMenuItem . Use listMenuItems to have the console list the names of all menu items.\n\n**Parameters**\n\nParameter | Description\n-----------------------\ncMenuItem | The menu item to execute.  A list of menu item names can be obtained with listMenuItems.\noDoc | (optional, Acrobat 7.0) oDoc is the Doc object of a document that is not hidden (see the Doc object hidden property). If this parameter is present, execMenuItem executes the menu item in the document\u2019s context.",
    "This example executes the File > Open menu item. It displays a dialog box asking for the file to be opened.\n\n```\napp.execMenuItem(\"Open\");\n```",
    "(Acrobat 5.0)\n\nThis example illustrates how a form object does not survive the execution of `app.execMenuItem(\"SaveAs\")` , as noted above.\n\n```\nvar f = this.getField(\"myField\");\n// Assume preferences set to save linearized\napp.execMenuItem(\"SaveAs\");\n// Exception thrown, field not updated\nf.value = 3;\n```",
    "(Acrobat 5.0)\n\nAfter executing `app.execMenuItem(\"SaveAs\")` , Field objects must be acquired again.\n\n```\nvar f = this.getField(\"myField\");\n// Assume preferences set to save linearized\napp.execMenuItem(\"SaveAs\");\n// Get the field again after the linear save\nvar f = getField(\"myField\");\n// Field updated to a value of 3\nf.value = 3;\n```\n\n**Example 4 (Acrobat 8.0 and later)**\n\nExecute `app.execMenuItem` in folder JavaScript using a trusted function.\n\n```\nmyTrustedMenu = app.trustedFunction( function( name )\n{\n    app.beginPriv();\n    app.execMenuItem(name);\n    app.endPriv();\n});\n```\n\nOnce Acrobat or Adobe Reader is restarted, the script, for example,\n\n```\nmyTrustedMenu(\"PropertyToolbar\");\n```\n\nmay be executed from a non-privileged context, such as a mouse-up button action, without silent failure. The script above shows/hides the Properties toolbar."
  ],
  "Example 4 (Acrobat 8.0 and later)": "Execute `app.execMenuItem` in folder JavaScript using a trusted function.\n\n```\nmyTrustedMenu = app.trustedFunction( function( name )\n{\n    app.beginPriv();\n    app.execMenuItem(name);\n    app.endPriv();\n});\n```\n\nOnce Acrobat or Adobe Reader is restarted, the script, for example,\n\n```\nmyTrustedMenu(\"PropertyToolbar\");\n```\n\nmay be executed from a non-privileged context, such as a mouse-up button action, without silent failure. The script above shows/hides the Properties toolbar."
}