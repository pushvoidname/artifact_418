{
  "Object": "SOAP",
  "API_Name": "request",
  "API_Type": "Method",
  "API_Description": "Initiates a remote procedure call (RPC) or sends an XML message to a SOAP HTTP endpoint. The method either waits for the endpoint to reply (synchronous processing) or calls a method on the notification object (asynchronous processing).",
  "Version": "5.0",
  "Save-Prefs": "No",
  "Security": "No",
  "Product": "F",
  "Parameters": {
    "cURL": {
      "description": "The URL for a SOAP HTTP endpoint. The URL method must be one of:"
    },
    "oRequest": {
      "description": "An object that specifies the remote procedure name and parameters or the XML message to send.  See Additional notes on the oRequest parameter."
    },
    "oAsync": {
      "description": "(optional) An object that specifies that the method invocation will occur asychronously. The default is for the request to be made synchronously. The object has been modified in Acrobat 7.0.  (Acrobat 6.0) The oAsync object literal must have a function called response that will be called with two parameters (oResult and cURI) when the response returns. oResult is the same result object that would have been returned from the request call if it was called synchronously. cURI is the URI of the endpoint that the request was made to.  (Acrobat 7.0) The oAsync object response callback has the following parameters:"
    },
    "cAction": {
      "description": "(optional) In SOAP 1.1, this parameter is passed as the SOAPAction header. In SOAP 1.2, this parameter is passed as the action parameter in the Content-Type header.  The default is for the action to be an empty string.  The SOAPAction is a URN written to an HTTP header used by firewalls and servers to filter SOAP requests. The WSDL file for the SOAP service or the SOAP service description will usually describe the SOAPAction header required (if any)."
    },
    "bEncoded": {
      "description": "(optional) Encoded the request using the SOAP Encoding described in the SOAP Specification. Otherwise, the literal encoding is used.  The default is true."
    },
    "cNamespace": {
      "description": "(optional) A namespace for the message schema when the request does not use the SOAP Encoding.  The default is to omit the schema declaration."
    },
    "oReqHeader": {
      "description": "(optional, Acrobat 7.0) An object that specifies a SOAP header to be included with the request. The default is to send a request with only a SOAP Body.  The object is specified in the same way as the oRequest object except for two additional properties that can be specified in the request description:"
    },
    "oRespHeader": {
      "description": "(optional, Acrobat 7.0) An object that will be populated with the SOAP headers returned when the method completes if the function is being called synchronously (the header will be passed to the oAsync callback method otherwise).  The default is for the headers not to be returned.  See the description of the cResponseStyle parameter for the object format."
    },
    "cVersion": {
      "description": "(optional, Acrobat 7.0) The version of the SOAP protocol to use when generating the XML Message-either 1.1 or 1.2.  The default is to use \u201cSOAPVersion.version_1_1\u201d."
    },
    "oAuthenticate": {
      "description": "(optional, Acrobat 7.0) An object that specifies how to handle HTTP authentication or credentials to use for Web Service Security. The default is to present a user interface to the user to handle HTTP authentication challenges for BASIC and DIGEST authentication modes. The oAuthenticate object can have the following properties:"
    },
    "cResponseStyle": {
      "description": "(optional, Acrobat 7.0) An enumerated type indicating how the return value (in the case of the SOAP Body) and the oRespHeader object (in the case of a SOAP header) will be structured:"
    },
    "cRequestStyle": {
      "description": "(optional, Acrobat 7.0.5) Allows the interpretation of oRequest to be altered. The following values are permitted:"
    },
    "cContentType": {
      "description": "(optional, Acrobat 7.0.5) Allows the HTTP content-type header to be specified. The default is to use the SOAP messaging HTTP content-type."
    }
  },
  "Returns": "A response object if the method was called synchronously (that is, there is no `oAsync` parameter) or nothing if the method was called asynchronously. See the description of `cResponseStyle` above for the object description.\n\nThe SOAP types in the result are mapped to JavaScript types as follows:\n\nSOAP type | JavaScript type\n---------------------------\nxsd:string | String\nxsd:integer | Number\nxsd:float | Number\nxsd:dateTime | Date\nxsd:boolean | Boolean\nxsd:hexBinary | ReadStream object\nxsd:base64Binary | ReadStream object\nSOAP-ENC:base64 | ReadStream object\nSOAP-ENC:Array | Array\nNo Type Information | String",
  "Examples": [
    "below shows this technique.\nsoapAttributes | (Acrobat 7.0) An object specifying XML attributes to be included when building the element corresponding to the request node. The object keys are the attribute names and the corresponding value is the attribute value.\nsoapQName | (Acrobat 7.0) An object specifying the namespace qualified name (QName) of the request node. For example, in the element <ns:local xmlns:ns=\"urn:example.org\">, the element name is a QName consisting of a local name (\"local\") and a namespace (\"urn:example.org\").   This object has two properties:\n\nlocalName: A string indicating the local name of the QName.\nnameSpace: A string indicating the namespace of the QName.\nsoapAttachment | (Acrobat 7.0) A Boolean value indicating that the soapValue contents of the node should be encoded as an attachment according to the SwA specification. The soapValue must be a stream if the corresponding soapAttachment property is true, otherwise an exception will be thrown.\nsoapParamOrder | (Acrobat 7.0) An array indicating the order in which RPC parameters should be sent to the server. The array is a set of strings with the parameter names. This value is only applicable when bEncoding is true.",
    "Use `request` to initiate a remote procedure call for echo services.\n\nA service WSDL Document URL is needed. It can be obtained from the \u201cRound 2 Interop Services - using SOAP 1.2\u201d section at the following URL: http://www.whitemesa.com/interop.htm .\n\n```\nvar cURL =\n<get a URL for this service from\n            http://www.whitemesa.com/interop.htm>;\n\n   var cTestString = \"This is my test string\";\n\n   // Call the echoString SOAP method -- it is an RPC Encoded method\n   var response = SOAP.request(\n   {\n       cURL: cURL,\n       oRequest: {\n           \"http://soapinterop.org/:echoString\": {\n               inputString: cTestString\n           }\n       },\n       cAction: \"http://soapinterop.org/\"\n   });\n\n   var result =\n\n    response[\"http://soapinterop.org/:echoStringResponse\"][\"return\"];\n\n   // This should be the same as cTestString\n   console.println(result + \" == \" + cTestString);\n\n   // Call the echoInteger SOAP method -- JavaScript doesn't support\n   // integers so we make our own integer object.\n   var oTestInt =\n   {\n       soapType: \"xsd:int\",\n       soapValue: \"10\"\n   };\n\n   var response = SOAP.request(\n   {\n       cURL: cURL,\n       oRequest: {\n           \"http://soapinterop.org/:echoInteger\": {\n               inputInteger: oTestInt\n           }\n       },\n       cAction: \"http://soapinterop.org/\"\n   });\n\n   var result =\n\n    response[\"http://soapinterop.org/:echoIntegerResponse\"][\"return\"];\n\n   // This should be the same as oTestInt.soapValue\n   console.println(result + \" == \" + oTestInt.soapValue);\n```\n\nThis produces the following output:\n\n```\nThis is my test string == This is my test string\n10 == 10\n```",
    "Set a SOAP Header and gets it back.\n\n```\nvar cURL = <URL of a Service>;\nvar NS = \"http://www.example.com/soap/:\";\nvar oHeader = {};\noHeader[NS + \"testSession\"] =\n{\n    soapType: \"xsd:string\",\n    soapValue: \"Header Test String\"\n};\nvar oResultHeader = {};\nvar oRequest = {};\noRequest[NS + \"echoHeader\"] = {};\nvar response = SOAP.request(\n{\n    cURL: cURL,\n    oRequest: oRequest,\n    cAction: \"http://soapinterop.org/\",\n    oReqHeader: oHeader,\n    oRespHeader: oResultHeader\n});\n```",
    "A request for echo services with HTTP Authentication.\n\n```\nvar oAuthenticator =\n{\n    Username: \"myUserName\",\n    Password: \"myPassword\"\n};\nvar response = SOAP.request(\n{\n    cURL: cURL,\n    oRequest: {\n        \"http://soapinterop.org/:echoString\":\n        {\n            inputString: cTestString\n        }\n    },\n    cAction: \"http://soapinterop.org/\",\n    oAuthenticate: oAuthenticator\n});\n```"
  ],
  "Exceptions": "`SOAPError` is thrown when the SOAP endpoint returns a SOAPFault. The `SOAPError` Exception object has the following properties:\n\nProperty | Description\n----------------------\nfaultCode | A string indicating the SOAP Fault Code for this fault.\nfaultActor | A string indicating the SOAP Actor that generated the fault.\nfaultDetail | A string indicating detail associated with the fault.\n\n`NetworkError` is thrown when there is a failure from the underlying HTTPtransport layer or in obtaining a Network connection. The NetworkError Exception object has the property `statusCode` , which is an HTTP Status code or \u20131 if the network connection could not be made.\n\nStandard Acrobat exceptions can also be thrown.\n\n!! Note If the method was called asynchronously, the exception object may be passed to the `response` callback method.",
  "Additional notes on the oRequest parameter": "The `oRequest` parameter is an object literal that specifies the remote procedure name and the parameters to call. The object literal uses the fully qualified method name of the remote procedure as the key. The namespace should be separated from the method name by a colon.\n\nFor example, if the namespace for the method is `http://mydomain/methods` and the method name is `echoString` , the fully qualified name would be `http://mydomain/methods:echoString` . The value of this key is an object literal, each key is a parameter of the method, and the value of each key is the value of the corresponding parameter of the method. For example:\n\n```\noRequest: {\n    \"http://soapinterop.org/:echoString\":{inputString: \"Echo!\"}\n}\n```\n\nWhen passing parameters to a remote procedure, JavaScript types are bound to SOAP types automatically as listed in the table:\n\nJavaScript type | SOAP type\n---------------------------\nString | xsd:string\nNumber | xsd:float\nDate | xsd:dateTime\nBoolean | xsd:boolean\nReadStream object | SOAP-ENC:base64\nArray | SOAP-ENC:Array\nOther | No type information\n\n!! Note The `xsd` namespace refers to the XML Schema Datatypes namespace `http://www.w3.org/2001/XMLSchema` . The `SOAP-ENC` namespace refers to the SOAP Encoding namespace `http://schemas.xmlsoap.org/soap/encoding/` .\n\nThe `oRequest` object supports the following properties:\n\nProperty | Description\n----------------------\nsoapType | The SOAP type that will be used for the value when generating the SOAP message. It is useful when a datatype is needed other than the automatic datatype binding described above. The type should be namespace qualified using the <namespace>:<type> notation, for example  http://mydomain/types:myType  However, the xsd (XMLSchema Datatypes), xsi (XMLSchema Instance), and SOAP-ENC (SOAP Encoding) namespaces are implicitly defined in the SOAP message, so the soapType can use them, as in xsd:int for the XMLSchema Datatype Integer type.\nsoapValue | (Acrobat 6.0) The value that will be used when generating the SOAP message. It can be a string or a ReadStream object. soapValue is passed unescaped (that is, not XML Entity escaped). For example, \u201c<\u201d is not converted to \u201c&lt;\u201d in the XML Message. Consequently, soapValue can be a raw XML fragment that will be passed to the XML Message.  (Acrobat 7.0) soapValue can now also be an array of nodes that are an ordered set of children of the node in the request message.\nsoapName | The element name that will be used when generating the SOAP message instead of the key name in the object literal.  For example, integers are not supported in JavaScript, but an integer parameter to a SOAP method can be constructed as follows:  var oIntParameter = { soapType: \u201cxsd:int\u201d, soapValue: \u201c1\u201d };  Later, the oRequest parameter for the SOAP.request method might be this:  oRequest: { \u201chttp://soapinterop.org/:echoInteger\u201d: { inputInteger: oIntParameter } }  Example 1 below shows this technique.\nsoapAttributes | (Acrobat 7.0) An object specifying XML attributes to be included when building the element corresponding to the request node. The object keys are the attribute names and the corresponding value is the attribute value.\nsoapQName | (Acrobat 7.0) An object specifying the namespace qualified name (QName) of the request node. For example, in the element <ns:local xmlns:ns=\"urn:example.org\">, the element name is a QName consisting of a local name (\"local\") and a namespace (\"urn:example.org\").   This object has two properties:\n\nlocalName: A string indicating the local name of the QName.\nnameSpace: A string indicating the namespace of the QName.\nsoapAttachment | (Acrobat 7.0) A Boolean value indicating that the soapValue contents of the node should be encoded as an attachment according to the SwA specification. The soapValue must be a stream if the corresponding soapAttachment property is true, otherwise an exception will be thrown.\nsoapParamOrder | (Acrobat 7.0) An array indicating the order in which RPC parameters should be sent to the server. The array is a set of strings with the parameter names. This value is only applicable when bEncoding is true."
}