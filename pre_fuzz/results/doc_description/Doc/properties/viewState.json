{
  "Object": "Doc",
  "API_Name": "viewState",
  "API_Type": "Properties",
  "API_Description": "An opaque object representing the current view state of the document. The state includes, at minimum, information about the current page number, scroll position, zoom level, and field focus. To set this value, you must use what was previously returned from a read of the value. It can be used to restore the view state of a document. !! Note The object is only defined within an embedded PDF.",
  "Version_Key": "7.05",
  "Save_Prefs": "No",
  "Security": "No",
  "Product": "All",
  "Type": "Object",
  "Access": "R/W",
  "Examples": [
    "Example: This example gets the view state and sends it to the host application, which can store it and pass it back to the viewer later to restore the view to the original state. This code may be executed by a button in the PDF document. The first entry in the array signals the nature of the message to the host.\n\n```\nif(this.hostContainer)\n{\n    cVState = this.viewState.toSource();\n    aMsg = new Array( \"viewState\", cVState );\n    this.hostContainer.postMessage(aMsg);\n}\n```\n\nIn the host application, the message handler might have this form:\n\n```\nvar cViewState=\"\"; // Variable to save the viewState\nfunction onMessageFunc( stringArray )\n{\n    var PDFObject = document.getElementById( PDFObjectID );\n    if ( this != PDFObject.messageHandler )\n        alert( \"Incorrect this value in onMessage handler\" );\n    // The first entry in the encoming array is the signal\n    var signal = stringArray[0];\n\n    switch ( signal ) {\n        case \"Msg\":\n            var msgStr = \"\";\n            for ( var i = 1; i < stringArray.length; i++ )\n                msgStr += (stringArray[ i ] + \"<br>\");\n            writeMsg( msgStr ); // A function to write to the document.\n            break;\n\n        case \"viewState\":\n            // View state, let's save this\n            cViewState = stringArray[1];\n            break;\n    }\n}\n```\n\nYou can post the value of `cViewState` back to the embedded PDF using a button. Within the document level JavaScript of the PDF, you might have,\n\n```\nif ( this.hostContainer )\n{\n    myHostContainer = this.hostContainer;\n    myHostContainer.messageHandler = {\n        onMessage: function(aMessage) {\n            var f = this.doc.getField(\"msg4pdf\");\n            var strValue = \"\";\n            var signal = aMessage[0];\n            switch ( signal ) {\n                case \"Msg\":\n                    for(var i = 1; i < aMessage.length; i++)\n                        strValue += aMessage[i] + \"r\";\n                    f.value = strValue;\n                    break;\n                case \"viewState\":\n                    var restoreViewState = eval( aMessage[1] );\n                    // Reset the viewState, begin sure to acquire the correct\n                    // Doc as the doc property of this.\n                    this.doc.viewState = restoreViewState;\n                    break;\n            }\n        },\n        onError: function(error, aMessage) {\n                console.println(\"error: \"+ error.toString())\n        },\n        onDisclose: HostContainerDisclosurePolicy.SameOriginPolicy,\n        allowDeliverWhileDocIsModel: true\n    };\n    // The this object will be the messageHandler instance that the\n\n     // method is being called on, so we save the Doc as a doc\n\n     // property of the messageHandler instance.\n    myHostContainer.messageHandler.doc = this;\n}\n```"
  ]
}