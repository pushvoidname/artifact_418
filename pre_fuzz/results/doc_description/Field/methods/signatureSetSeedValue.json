{
  "Object": "Field",
  "API_Name": "signatureSetSeedValue",
  "API_Type": "Method",
  "API_Description": "Sets properties that are used when signing signature fields. The properties are stored in the signature field and are not altered when the field is signed, the signature is cleared, or when `resetForm` is called. Use `signatureGetSeedValue` to obtain the property settings.",
  "Version": "6.0",
  "Save-Prefs": "D",
  "Security": "Yes",
  "Product": "Not",
  "Parameters": {
    "oSigSeedValue": {
      "description": "A SeedValue object containing the signature seed value properties."
    }
  },
  "Returns": "",
  "Examples": [
    "{cn:\"Alice\", ou:\"Engineering\", o:\"Acme Inc\"}. The friendly names for the DN attributes (cn, o, ou, and so on) are the ones defined in RDN (see RDN).\nExample 2: {cn:\u201dJoe Smith\u201d, ou:\n\u201cEngineering\u201d, 2.5.4.43:\"JS\"}, where OID 2.5.4.43 is used to carry out matching for the \u201cInitials\u201d attribute. The following is sample code to define the above DN:\nvar subjectDN = {cn:\u201dJoe Smith\u201d, ou:\u201dEngineering\u201d};\nsubjectDN[\u201c2.4.5.43\u201d] = \u201cJS\u201d;\nAttributes whose value is of type DirectoryString or IA5String can be specified as shown in the example above, whereas for all other value types, for example, dateOfBirth whose value is of type GeneralizedTime, the values need to be specified as a hex-encoded binary string.\nFor more information about the various attributes and their types, refer to RFC 3280.\nurl | String | R/W | A URL that can be used to enroll for a new credential if a matching credential is not found.\nA degenerate use of this property is when the URL points to a web service that is a DigitalID store (such as a signature web service that can be used for server-based signing). In that case, the URL indicates that as long as the signer has a DigitalID from that web service, it is acceptable for signing.\nThe value of the corresponding flag in the flags property indicates whether this is a required or optional constraint.\nurlType | String | R/W | (Acrobat 8.0) String indicating the type of URL specified by the url property. These are the valid values for Acrobat 8.0:\n\n\"HTML\": The URL points to an HTML website and Acrobat will use the web browser to display its contents. The the value of the url bit of the flags property is ignored.\n\"ASSP\": The URL references a signature web service that can be used for server-based signing. If the url bit of the flags property indicates that this is a required constraint, this implies that the credential used when signing must come from this server.\n\nIf this attribute isn\u2019t present, it\u2019s assumed that the URL points to a HTML site.\n\n**Seed value timeStamp specifier object**\n\nThe properties of the seed value timeStamp specifier object are as follows:\n\nProperty | Type | Access | Description\n--------------------------------------\nurl | String | R/W | URL of the timeStamp server providing an RFC 3161 compliant timeStamp.\nflags | Number | R/W | A bit flag controlling whether the time stamp is required (1) or not required (0). The default is 0.",
    "Seed the signature field, which has yet to be signed, with MDP, legal attestations, and permitted reasons for signing.\n\n```\n// Obtain the signature Field object:\nvar f = this.getField(\"mySigField\");\nf.signatureSetSeedValue({\n    mdp: \"defaultAndComments\",\n    legalAttestations: [\"Trust me and be at ease.\",\n        \"You can surely trust the author.\"],\n    reasons: [\"This is a reason\", \"This is a better reason\"],\n    flags: 8\n})\n```",
    "Sets the signing handler as PPKMS and the format as \u201cadbe.pkcs7.sha1\u201d.\n\n```\nvar f = this.getField( \"mySigField\" );\n\n   f.signatureSetSeedValue({\n       filter: \"Adobe.PPKMS\",\n       subFilter: [\"adbe.pkcs7.sha1\"],\n       flags: 3\n});\n```",
    "Sets the signing handler as PPKLite and the issuer of the signer\u2019s certificate as caCert. Both are mandatory seed values and signing will fail if either constraint is not met.\n\n```\nvar caCert = security.importFromFile(\"Certificate\", \"/C/temp/CA.cer\");\nf.signatureSetSeedValue({\n    filter: \"Adobe.PPKLite\",\n    certspec: {\n        issuer: [caCert],\n        url: \"http://www.example.com/enroll.html\",\n        flags : 2\n    },\n    flags: 1\n});\n```"
  ],
  "SeedValue Object": "A generic JavaScript object, passed to `signatureSetSeedValue` and returned by `signatureGetSeedValue` , which represents a signature seed value. It has the following properties:\n\nProperty | Type | Access | Description\n--------------------------------------\nappearanceFilter | String | R/W | (Acrobat 9.0) A string corresponding to the named appearance that the AppearanceFilter seed value should match.\ncertspec | object | R/W | A seed value CertificateSpecifier object. see CertificateSpecifier Object for a listing of the properties of this object.\ndigestMethod | Array of strings | R/W | (Acrobat 8) An array of acceptable digest methods to use while signing. The valid string values are SHA1, SHA256, SHA384, SHA512, MD5, and RIPEMD160.\n\n!! Note This is only applicable if the DigitalID contains RSA public/private keys. If they contain DSA public/private keys, then the value is always `SHA1` . The `flags` property indicates whether this is a required constraint. `filter` String R/W The language-independent name of the security handler to be used when signing. If `filter` is specified and the `flags` property indicates this entry is a required constraint, then the signature handler specified by this entry must be used when signing; otherwise, signing must not take place. If `flags` indicates that this is an optional constraint, then this handler should be used if it is available. If it is not available, a different handler can be used instead. `flags` Number R/W A set of bit flags controlling which of the following properties of this object are required. The value is the logical OR of the following values, which are set if the corresponding property is required: 1: filter 2: subFilter 4: version 8: reasons 16: legalAttestations 32: shouldAddRevInfo 64: digestMethod* 128: lockDocument 256: appearanceFilter Usage: 1 specifies filter, 3 specifies filter and sub-filter, and 11 specifies filter, sub-filter, and reasons. If this field is not present, all properties are optional. `legalAttestations` Array of Strings R/W (Acrobat 7.0) A list of legal attestations that the user can use when creating an Modification Detection and Prevention (MDP) (certified) signature. The value of the corresponding flag in the `flags` property indicates whether this is a required or optional constraint. `lockDocument` String R/W (Acrobat 9.0) A string corrresponding to one of the three LockDocument seed value states. Values are auto true false Any other value will not be set. `mdp` String R/W (Acrobat 7.0) The MDP setting to use when signing the field. Values are allowNone\ndefault\ndefaultAndComments While `allowAll` is a legal value, it cancels out the effect of MDP and no certification signature can be used for this field, resulting in the signature being an approval signature, not an certification signature. Values are unique identifiers and are described in the table titled Modification Detection and Prevention (MDP) Values . `reasons` Array of Strings R/W A list of reasons that the user is allowed to use when signing. (Acrobat 8.0) If this array has a single element and that element is a single period \u2018.\u2019 and if the `reasons` are marked as required by the `flags` property, then Acrobat 8 will suppress the UI for specifying a reason during signing. This overrides the users preference. If this array is empty and `reasons` are marked as required, an exception will be thrown. `shouldAddRevInfo` Boolean R/W (Acrobat 8) If set to `true` , instructs the application to carry out revocation checking of the certificate (and the corresponding chains) used to sign, and include all the revocation information within the signature. Only relevant if `subFilter` is `adbe.pkcs7.detached` or `adbe.pkcs7.sha1` , and it is not applicable for `adbe.x509.rsa_sha1` . Hence, if the `subFilter` is `adbe.x509.rsa_sha1` and it\u2019s required that revocation information be added, then the signing operation fails. If `shouldAddRevInfo` is `true` and the `flags` property indicates this is a required constraint, then the tasks described above must be performed. If they cannot be performed, then signing must fail. The default value is `false` . `subFilter` Array of Strings R/W An array of acceptable formats to use for the signature. Refer to the Signature Info object\u2019s `subFilter` property for a list of known formats. The first name in the array that matches an encoding supported by the signature handler should be the encoding that is actually used for signing. If `subFilter` is specified and the `flags` property indicates that this entry is a required constraint, then the first matching encodings must be used when signing; otherwise, signing must not take place. If the `flags` property indicates that this is an optional constraint, then the first matching encoding should be used if it is available. If it is not available, a different encoding can be used. `timeStampspec` Object R/W (Acrobat 7.0) A Seed Value timeStamp Specifier object. It uses the `url` and `flags` properties to specify a timestamp server. See Seed value timeStamp specifier object . `version` Number R/W The minimum required version number of the signature handler to be used to sign the signature field. Valid values are 1 and 2. A value of 1 specifies that the parser must be able to recognize all seed value dictionary entries specified in PDF 1.5. A value of 2 specifies that it must be able to recognize all seed value dictionary entries specified in PDF 1.7 and earlier. The `flags` property indicates whether this is a required constraint.\n\n!! Note The PDF Reference version 1.6 and earlier, erroneously indicates that the `V` entry (the key that corresponds to the `version` parameter) is of type integer. This entry is of type real.",
  "CertificateSpecifier Object": "This generic JavaScript object contains the certificate specifier properties of a signature seed value. Used in the `certSpec` property of the `SeedValue` object. This object contains the following properties:\n\nProperty | Type | Access | Description\n--------------------------------------\nflags | Number | R/W | A set of bit flags controlling which of the following properties of this object are required. The value is the logical OR of the following values, which are set if the corresponding property is required:\n\n1: subject\n2: issuer\n4: oid\n8: subjectDN\n16: Reserved\n32: keyUsage\n64: url*\n\nIf this field is not present, all properties are optional.\nissuer | Array of Certificate objects | R/W | An array of Certificate objects that are acceptable for signing. If specified, the signing certificate must be issued by a certificate that is an exact match with one of the certificates in this array.  The value of the corresponding flag in the flags property indicates whether this is a required or optional constraint.\nkeyUsage | Object | R/W | (Acrobat 8.0) Array of integers, where each integer specifies the acceptable key-usage extension that must be present in the signing certificate.\nEach integer is constructed as follows:\nThere are two bits used for each key-usage type (defined in RFC 3280) starting from the least significant bit:\n\ndigitalSignature(bits 2,1),\nnonRepudiation(4,3)\nkeyEncipherment(6,5)\ndataEncipherment(8,7)\nkeyAgreement(10,9)\nkeyCertSign(12,11)\ncRLSign(14,13)\nencipherOnly(16,15)\ndecipherOnly(18,17)\nThe value of the two bits have the following semantics:\n00: the corresponding keyUsage must not be set\n01: the corresponding keyUsage must be set\n10 and 11: the state of the corresponding keyUsage doesn\u2019t matter.\n\nFor example, if it is required that the key-usage type digitalSignature be set and the state of all other key-usage types do not matter, then the corresponding integer would be 0x7FFFFFFD. That is, to represent digitalSignature, set 01 for bits 2 and 1 respectively, and set 11 for all other key-usage types.\nThe value of the corresponding flag in the flags property indicates whether this is a required constraint.\noid | Array of  Strings | R/W | An array of strings that contain Policy OIDs that must be present in the signing certificate. This property is only applicable if the issuer property is present.\nThe value of the corresponding flag in the flags property indicates whether this is a required or optional constraint.\nsubject | Array of Certificate objects | R/W | An array of Certificate objects that are acceptable for signing. If specified, the signing certificate must be an exact match with one of the certificates in this array.\nThe value of the corresponding flag in the flags property indicates whether this is a required or optional constraint.\nsubjectDN | Array of objects | R/W | (Acrobat 8.0) Array of objects, where each object specifies a Subject Distinguished Name (DN) that is acceptable for signing. A signing certificate satisfies a DN requirement if it at least contains all the attributes specified in the DN (it can therefore contain additional DN attributes). If this entry is specified, the signing certificate must satisfy at least one of the DNs in the array.\nDN attribute restrictions are specified in this object by adding them as properties. The properties\u2019 key names can either be the corresponding attributes\u2019 friendly names or OIDs (as defined in RFC 3280). The properties\u2019 value must be of type string.\nThe value of the corresponding flag in the flags property indicates whether this is a required or optional constraint.",
  "Seed value timeStamp specifier object": "The properties of the seed value timeStamp specifier object are as follows:\n\nProperty | Type | Access | Description\n--------------------------------------\nurl | String | R/W | URL of the timeStamp server providing an RFC 3161 compliant timeStamp.\nflags | Number | R/W | A bit flag controlling whether the time stamp is required (1) or not required (0). The default is 0."
}