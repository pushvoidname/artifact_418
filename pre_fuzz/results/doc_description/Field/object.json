{
  "object": "Field",
  "apiName": "Field",
  "apiType": "Object",
  "apiDescription": "This object represents an Acrobat form field (that is, a field created using the Acrobat form tool or the Doc `addField` method). In the same manner that a form author can modify an existing field\u2019s properties, such as the border color or font, the JavaScript user can use the Field object to perform the same modifications. Before a field can be accessed, it must be bound to a JavaScript variable through a method provided by the Doc. More than one variable may be bound to a field by modifying the field\u2019s object properties or accessing its methods. This affects all variables bound to that field. ``` var f = this.getField(\"Total\"); ``` This example allows the script to manipulate the form field \u201cTotal\u201d by means of the variable `f` . Fields can be arranged hierarchically within a document. For example, form fields with names like \u201cFirstName\u201d and \u201cLastName\u201d are called and there is no association between them. By changing the field names, a hierarchy of fields within the document can be created. For example, \u201cName.First\u201d and \u201cName.Last\u201d forms a tree of fields. The period (\u2018.\u2019) separator in Acrobat forms denotes a hierarchy shift. \u201cName\u201d in these fields is the parent; \u201cFirst\u201d and \u201cLast\u201d are the children. Also, the field \u201cName\u201d is an field because it has no visible appearance. \u201cFirst\u201d and \u201cLast\u201d are fields that appear on the page. Acrobat form fields that share the same name also share the same value. Terminal fields can have different presentations of that data. For example, they can appear on different pages, be rotated differently, or have a different font or background color, but they have the same value. Therefore, if the value of one presentation of a terminal field is modified, all others with the same name are updated automatically. Each presentation of a terminal field is referred to as a . An individual widget does not have a name but is identified by index (0-based) within its terminal field. The index is determined by the order in which the individual widgets of this field were created (and is unaffected by tab-order). You can determine the index for a specific widget by using the Fields navigation tab in Acrobat. The index is the number that follows the \u2018#\u2019 sign in the field name shown. (In Acrobat 6.0 or later, the widget index is displayed only if the field has more than one widget.) You can double-click an entry in the Fields panel to go to the corresponding widget in the document. Alternatively, if you select a field in the document, the corresponding entry in the Fields panel is highlighted. Beginning with Acrobat 6.0, `getField` can be used to retrieve the Field object of one individual widget of a field. This notation consists of appending a \u201c.\u201d (period) followed by the widget index to the field name passed. When this approach is used, the Field object returned by `getField` encapsulates only one individual widget. You can use the Field objects returned this way anywhere you would use a Field object returned by passing the unaltered field name. However, the set of nodes that are affected may vary, as shown in the following table. Beginning with Acrobat 8.0, the LiveCycle Reader Extensions Field right is checked for `Field` objects only if the JavaScript code is executed outside the PDF file (from the JavaScript console, through batch execution, or through `JSObject` ). Action | Field object that represents all widgets | Field object that represents one specific widget ----------------------------------------------------------------------------------------------------- Get a widget property | Gets the property of widget # 0. | Gets the property of the widget. Set a widget property | Sets the property of all widgets that are children of that field. (The rect property and the setFocus method are exceptions that apply to widget # 0. See example below.) | Sets the property of the widget. Get a field property | Gets the property of the field. | Gets the property of the parent field. Set a field property | Sets the property of the field. | Sets the property of the parent field. The following example changes the `rect` property of the second radio button (the first would have index 0) of the field \u201cmy radio\u201d. ``` var f = this.getField(\"my radio.1\"); f.rect = [360, 677, 392, 646]; ```",
  "version": "",
  "savePrefs": "",
  "security": "",
  "product": ""
}